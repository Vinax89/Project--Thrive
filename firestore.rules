/**
 * @fileoverview Firestore Security Rules for ChatPay application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access their own data. All data is nested under /users/{userId} to
 * enforce this ownership.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/debts/{debtId}: Debt information for a user.
 * - /users/{userId}/obligations/{obligationId}: Obligation information for a user.
 * - /users/{userId}/budgets/{budgetId}: Budget information for a user.
 * - /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}: Budget item information.
 * - /users/{userId}/investments/{investmentId}: Investment information for a user.
 *
 * Key Security Decisions:
 * - Users can only access their own data (ownership enforced via path).
 * - Listing all users is disallowed.
 *
 * Authorization Independence:
 * The Firestore structure is designed to ensure Authorization Independence and clarity.
 * User data is stored under `/users/{userId}` for private data, following path-based ownership.
 * Each user has their own `Debt`, `Obligation`, `Budget`, `BudgetItem`, and `Investment` data,
 * which are stored as subcollections under the user's document, thus providing clear ownership
 * and simplifying security rules. The data for each collection is stored under the specific
 * user's ID to ensure data isolation and authorization independence. This prevents needing
 * `get()` calls in security rules to authorize ownership since the path inherently defines ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for the user profile document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile document if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their profile document if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile document for 'user456'.
     * @deny (update) User with ID 'user123' cannot update the profile document for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verified user has to be signed in to do anything
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for debts.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) User with ID 'user123' can create a debt under their profile.
     * @allow (get) User with ID 'user123' can read a debt under their profile.
     * @deny (create) User with ID 'user123' cannot create a debt under 'user456' profile.
     * @deny (update) User with ID 'user123' cannot update a debt under 'user456' profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/debts/{debtId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userProfileId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for obligations.
     * @path /users/{userId}/obligations/{obligationId}
     * @allow (create) User with ID 'user123' can create an obligation under their profile.
     * @allow (get) User with ID 'user123' can read an obligation under their profile.
     * @deny (create) User with ID 'user123' cannot create an obligation under 'user456' profile.
     * @deny (update) User with ID 'user123' cannot update an obligation under 'user456' profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/obligations/{obligationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userProfileId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for budgets.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with ID 'user123' can create a budget under their profile.
     * @allow (get) User with ID 'user123' can read a budget under their profile.
     * @deny (create) User with ID 'user123' cannot create a budget under 'user456' profile.
     * @deny (update) User with ID 'user123' cannot update a budget under 'user456' profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userProfileId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for budget items.
     * @path /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}
     * @allow (create) User with ID 'user123' can create a budget item under their budget.
     * @allow (get) User with ID 'user123' can read a budget item under their budget.
     * @deny (create) User with ID 'user123' cannot create a budget item under 'user456' budget.
     * @deny (update) User with ID 'user123' cannot update a budget item under 'user456' budget.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
     * @description Enforces user-ownership for budget categories.
     * @path /users/{userId}/budgetCategories/{budgetCategoryId}
     * @allow (create) User with ID 'user123' can create a budget category under their budget.
     * @allow (get) User with ID 'user123' can read a budget category under their budget.
     * @deny (create) User with ID 'user123' cannot create a budget category under 'user456' budget.
     * @deny (update) User with ID 'user123' cannot update a budget category under 'user456' budget.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/budgetCategories/{budgetCategoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for investments.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) User with ID 'user123' can create an investment under their profile.
     * @allow (get) User with ID 'user123' can read an investment under their profile.
     * @deny (create) User with ID 'user123' cannot create an investment under 'user456' profile.
     * @deny (update) User with ID 'user123' cannot update an investment under 'user456' profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/investments/{investmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userProfileId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userProfileId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}