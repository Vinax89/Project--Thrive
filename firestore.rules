/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for financial data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/transactions/{transactionId}: Financial transactions for a given user.
 * - /users/{userId}/debts/{debtId}: Debt information for a given user.
 * - /users/{userId}/budgetCategories/{categoryId}: Budget categories for a given user.
 * - /users/{userId}/investments/{investmentId}: Investment information for a given user.
 * - /users/{userId}/alerts/{alertId}: User-defined financial alerts.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing of users is disallowed.
 * - Flexible data schemas are permitted for rapid iteration during prototyping.
 * - Data required for authorization decisions is denormalized onto the secured documents when applicable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) Unauthenticated users cannot create profiles.
     * @deny (get) Authenticated user cannot read other user's profiles.
     * @deny (update) Authenticated user cannot update other user's profiles.
     * @deny (delete) Authenticated user cannot delete other user's profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user can create transactions under their own user ID.
     * @allow (get) Authenticated user can read transactions under their own user ID.
     * @allow (update) Authenticated user can update transactions under their own user ID.
     * @allow (delete) Authenticated user can delete transactions under their own user ID.
     * @deny (create) Unauthenticated users cannot create transactions.
     * @deny (get) Authenticated user cannot read other user's transactions.
     * @deny (update) Authenticated user cannot update other user's transactions.
     * @deny (delete) Authenticated user cannot delete other user's transactions.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user debt documents.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) Authenticated user can create debts under their own user ID.
     * @allow (get) Authenticated user can read debts under their own user ID.
     * @allow (update) Authenticated user can update debts under their own user ID.
     * @allow (delete) Authenticated user can delete debts under their own user ID.
     * @deny (create) Unauthenticated users cannot create debts.
     * @deny (get) Authenticated user cannot read other user's debts.
     * @deny (update) Authenticated user cannot update other user's debts.
     * @deny (delete) Authenticated user cannot delete other user's debts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/debts/{debtId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user budget category documents.
     * @path /users/{userId}/budgetCategories/{categoryId}
     * @allow (create) Authenticated user can create budget categories under their own user ID.
     * @allow (get) Authenticated user can read budget categories under their own user ID.
     * @allow (update) Authenticated user can update budget categories under their own user ID.
     * @allow (delete) Authenticated user can delete budget categories under their own user ID.
     * @deny (create) Unauthenticated users cannot create budget categories.
     * @deny (get) Authenticated user cannot read other user's budget categories.
     * @deny (update) Authenticated user cannot update other user's budget categories.
     * @deny (delete) Authenticated user cannot delete other user's budget categories.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgetCategories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user investment documents.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) Authenticated user can create investments under their own user ID.
     * @allow (get) Authenticated user can read investments under their own user ID.
     * @allow (update) Authenticated user can update investments under their own user ID.
     * @allow (delete) Authenticated user can delete investments under their own user ID.
     * @deny (create) Unauthenticated users cannot create investments.
     * @deny (get) Authenticated user cannot read other user's investments.
     * @deny (update) Authenticated user cannot update other user's investments.
     * @deny (delete) Authenticated user cannot delete other user's investments.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/investments/{investmentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource.data != null;
        }

        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user alert documents.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) Authenticated user can create alerts under their own user ID.
     * @allow (get) Authenticated user can read alerts under their own user ID.
     * @allow (update) Authenticated user can update alerts under their own user ID.
     * @allow (delete) Authenticated user can delete alerts under their own user ID.
     * @deny (create) Unauthenticated users cannot create alerts.
     * @deny (get) Authenticated user cannot read other user's alerts.
     * @deny (update) Authenticated user cannot update other user's alerts.
     * @deny (delete) Authenticated user cannot delete other user's alerts.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}