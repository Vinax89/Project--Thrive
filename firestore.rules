/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for data privacy and security.
 * Users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile and associated subcollections.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 * - `list` operations are restricted to the owner of a user subcollection.
 *
 * Denormalization for Authorization:
 * No denormalization is explicitly used in this ruleset, as ownership is enforced via path.
 * However, consider denormalizing data like roles into the UserProfile document if more complex
 * authorization schemes are required in the future.
 *
 * Structural Segregation:
 * All private data is stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user ID matches the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the request's auth UID and resource data.
     * @returns {boolean} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create their profile.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create profile for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their profile.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get profile for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their profile.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update profile for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their profile.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete profile for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create a transaction.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create transaction for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their transaction.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get transaction for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their transaction.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update transaction for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their transaction.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete transaction for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user debt documents.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create a debt.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create debt for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their debt.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get debt for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their debt.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update debt for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their debt.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete debt for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/debts/{debtId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user budget category documents.
     * @path /users/{userId}/budgetCategories/{categoryId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create a budget category.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create budget category for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their budget category.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get budget category for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their budget category.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update budget category for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their budget category.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete budget category for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgetCategories/{categoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user investment documents.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create an investment.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create investment for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their investment.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get investment for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their investment.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update investment for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their investment.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete investment for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/investments/{investmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for user alert documents.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can create an alert.
     * @deny (create) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot create alert for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (get) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can get their alert.
     * @deny (get) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot get alert for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (update) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can update their alert.
     * @deny (update) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot update alert for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @allow (delete) User '5HaBmUz0e0eHTgSEGL19OhZvjp83' can delete their alert.
     * @deny (delete) User 'ADYj1jEToRcLnI3Jv3Gjhqqy60i2' cannot delete alert for '5HaBmUz0e0eHTgSEGL19OhZvjp83'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}