/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only
 * access their own data, preventing unauthorized access. Data schema is
 * not strictly enforced to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership.
 *
 * Key Security Decisions:
 * - Users can only manage their own data (create, read, update, delete).
 * - Data consistency is enforced between the path and document fields (e.g., userId in path must match userId in document).
 * - List operations are only allowed for the owner of the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @allow (get) User with UID 'user123' can read their profile document.
     * @deny (get) User with UID 'user456' cannot read the profile document for 'user123'.
     * @allow (update) User with UID 'user123' can update their profile document.
     * @deny (update) User with UID 'user456' cannot update the profile document for 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile document.
     * @deny (delete) User with UID 'user456' cannot delete the profile document for 'user123'.
     * @principle Enforces document ownership for writes and reads. Validates ownership on creation and enforces immutability of the owner field.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Secures a user's transactions sub-collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction document in their own collection.
     * @deny (create) User with UID 'user456' cannot create a transaction document in 'user123' collection.
     * @allow (get) User with UID 'user123' can read a transaction document in their own collection.
     * @deny (get) User with UID 'user456' cannot read a transaction document in 'user123' collection.
     * @allow (list) User with UID 'user123' can list transactions in their own collection.
     * @deny (list) User with UID 'user456' cannot list transactions in 'user123' collection.
     * @allow (update) User with UID 'user123' can update a transaction document in their own collection.
     * @deny (update) User with UID 'user456' cannot update a transaction document in 'user123' collection.
     * @allow (delete) User with UID 'user123' can delete a transaction document in their own collection.
     * @deny (delete) User with UID 'user456' cannot delete a transaction document from 'user123' collection.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures a user's debts sub-collection.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) User with UID 'user123' can create a debt document in their own collection.
     * @deny (create) User with UID 'user456' cannot create a debt document in 'user123' collection.
     * @allow (get) User with UID 'user123' can read a debt document in their own collection.
     * @deny (get) User with UID 'user456' cannot read a debt document in 'user123' collection.
     * @allow (list) User with UID 'user123' can list debt documents in their own collection.
     * @deny (list) User with UID 'user456' cannot list debt documents in 'user123' collection.
     * @allow (update) User with UID 'user123' can update a debt document in their own collection.
     * @deny (update) User with UID 'user456' cannot update a debt document in 'user123' collection.
     * @allow (delete) User with UID 'user123' can delete a debt document in their own collection.
     * @deny (delete) User with UID 'user456' cannot delete a debt document from 'user123' collection.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/debts/{debtId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures a user's budget categories sub-collection.
     * @path /users/{userId}/budgetCategories/{categoryId}
     * @allow (create) User with UID 'user123' can create a budget category document in their own collection.
     * @deny (create) User with UID 'user456' cannot create a budget category document in 'user123' collection.
     * @allow (get) User with UID 'user123' can read a budget category document in their own collection.
     * @deny (get) User with UID 'user456' cannot read a budget category document in 'user123' collection.
     * @allow (list) User with UID 'user123' can list budget categories in their own collection.
     * @deny (list) User with UID 'user456' cannot list budget categories in 'user123' collection.
     * @allow (update) User with UID 'user123' can update a budget category document in their own collection.
     * @deny (update) User with UID 'user456' cannot update a budget category document in 'user123' collection.
     * @allow (delete) User with UID 'user123' can delete a budget category document in their own collection.
     * @deny (delete) User with UID 'user456' cannot delete a budget category document from 'user123' collection.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/budgetCategories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures a user's investments sub-collection.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) User with UID 'user123' can create an investment document in their own collection.
     * @deny (create) User with UID 'user456' cannot create an investment document in 'user123' collection.
     * @allow (get) User with UID 'user123' can read an investment document in their own collection.
     * @deny (get) User with UID 'user456' cannot read an investment document in 'user123' collection.
     * @allow (list) User with UID 'user123' can list investment documents in their own collection.
     * @deny (list) User with UID 'user456' cannot list investment documents in 'user123' collection.
     * @allow (update) User with UID 'user123' can update an investment document in their own collection.
     * @deny (update) User with UID 'user456' cannot update an investment document in 'user123' collection.
     * @allow (delete) User with UID 'user123' can delete an investment document in their own collection.
     * @deny (delete) User with UID 'user456' cannot delete an investment document from 'user123' collection.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/investments/{investmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures a user's alerts sub-collection.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User with UID 'user123' can create an alert document in their own collection.
     * @deny (create) User with UID 'user456' cannot create an alert document in 'user123' collection.
     * @allow (get) User with UID 'user123' can read an alert document in their own collection.
     * @deny (get) User with UID 'user456' cannot read an alert document in 'user123' collection.
     * @allow (list) User with UID 'user123' can list alert documents in their own collection.
     * @deny (list) User with UID 'user456' cannot list alert documents in 'user123' collection.
     * @allow (update) User with UID 'user123' can update an alert document in their own collection.
     * @deny (update) User with UID 'user456' cannot update an alert document in 'user123' collection.
     * @allow (delete) User with UID 'user123' can delete an alert document in their own collection.
     * @deny (delete) User with UID 'user456' cannot delete an alert document from 'user123' collection.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/alerts/{alertId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}