/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for financial data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/transactions/{transactionId}: Financial transactions for a given user.
 * - /users/{userId}/debts/{debtId}: Debt information for a given user.
 * - /users/{userId}/budgetCategories/{categoryId}: Budget categories for a given user.
 * - /users/{userId}/investments/{investmentId}: Investment information for a given user.
 * - /users/{userId}/alerts/{alertId}: User-defined financial alerts.
 *
 * Key Security Decisions:
 * - User profiles and all sub-collections are strictly owned by the user.
 * - No listing of all users is allowed (privacy).
 * - All write operations require authentication.
 * - The rules do not validate the specific data types or optional/required fields of the entities in this phase. Only authorization is enforced.
 *
 * Denormalization for Authorization:
 * - No denormalization is used in this ruleset. The data is structured hierarchically,
 *   and the rules enforce ownership based on the user ID in the path.
 *
 * Structural Segregation:
 * - All data is private and user-specific, stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of all users.

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction in their transactions collection.
     * @allow (get) User with UID 'user123' can read a transaction in their transactions collection.
     * @allow (update) User with UID 'user123' can update a transaction in their transactions collection.
     * @allow (delete) User with UID 'user123' can delete a transaction in their transactions collection.
     * @deny (create) User with UID 'user456' cannot create a transaction in 'user123's collection.
     * @principle Enforces document ownership for all operations within a user's transactions sub-collection.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user debt documents.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) User with UID 'user123' can create a debt in their debts collection.
     * @allow (get) User with UID 'user123' can read a debt in their debts collection.
     * @allow (update) User with UID 'user123' can update a debt in their debts collection.
     * @allow (delete) User with UID 'user123' can delete a debt in their debts collection.
     * @deny (create) User with UID 'user456' cannot create a debt in 'user123's collection.
     * @principle Enforces document ownership for all operations within a user's debts sub-collection.
     */
    match /users/{userId}/debts/{debtId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user budget category documents.
     * @path /users/{userId}/budgetCategories/{categoryId}
     * @allow (create) User with UID 'user123' can create a budget category in their budgetCategories collection.
     * @allow (get) User with UID 'user123' can read a budget category in their budgetCategories collection.
     * @allow (update) User with UID 'user123' can update a budget category in their budgetCategories collection.
     * @allow (delete) User with UID 'user123' can delete a budget category in their budgetCategories collection.
     * @deny (create) User with UID 'user456' cannot create a budget category in 'user123's collection.
     * @principle Enforces document ownership for all operations within a user's budget categories sub-collection.
     */
    match /users/{userId}/budgetCategories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Controls access to user investment documents.
       * @path /users/{userId}/investments/{investmentId}
       * @allow (create) User with UID 'user123' can create an investment in their investments collection.
       * @allow (get) User with UID 'user123' can read an investment in their investments collection.
       * @allow (update) User with UID 'user123' can update an investment in their investments collection.
       * @allow (delete) User with UID 'user123' can delete an investment in their investments collection.
       * @deny (create) User with UID 'user456' cannot create an investment in 'user123's collection.
       * @principle Enforces document ownership for all operations within a user's investments sub-collection.
       */
    match /users/{userId}/investments/{investmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user alert documents.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User with UID 'user123' can create an alert in their alerts collection.
     * @allow (get) User with UID 'user123' can read an alert in their alerts collection.
     * @allow (update) User with UID 'user123' can update an alert in their alerts collection.
     * @allow (delete) User with UID 'user123' can delete an alert in their alerts collection.
     * @deny (create) User with UID 'user456' cannot create an alert in 'user123's collection.
     * @principle Enforces document ownership for all operations within a user's alerts sub-collection.
     */
    match /users/{userId}/alerts/{alertId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}