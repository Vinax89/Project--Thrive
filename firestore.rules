/**
 * @fileoverview Firestore Security Rules for ChatPay application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user can only access their own profile and associated data (debts, transactions, obligations, budgets, budget items, budget categories, and investments).
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring clear ownership and preventing cross-user data access.
 *
 * Key Security Decisions:
 * - Users can only list their own data.
 * - Write access is restricted to the owner of the data, based on the authenticated user's ID.
 *
 * Denormalization for Authorization:
 *  - The userId is explicitly part of the Firestore path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that the user is signed in.
     * @return {boolean} True if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user profile based on the `userId` in the path.
     * @param {string} userId The user ID from the Firestore path.
     * @return {boolean} True if the request is made by the owner.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the document.
     * @param {string} userId The user ID from the Firestore path.
     * @return {boolean} True if the request is made by the existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their own profile.
     * @allow (get, update, delete) - User with matching {userId} can get, update, and delete their own profile.
     * @deny (create) - User attempts to create another user's profile.
     * @deny (get, update, delete) - User attempts to get, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/debts/{debtId} collection.
     * @path /users/{userId}/debts/{debtId}
     * @allow (create) - User with matching {userId} can create debt under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own debt.
     * @deny (create) - User attempts to create debt under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's debt.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/debts/{debtId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User with matching {userId} can create transaction under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own transaction.
     * @deny (create) - User attempts to create transaction under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's transaction.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/obligations/{obligationId} collection.
     * @path /users/{userId}/obligations/{obligationId}
     * @allow (create) - User with matching {userId} can create obligation under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own obligation.
     * @deny (create) - User attempts to create obligation under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's obligation.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/obligations/{obligationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId} collection.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) - User with matching {userId} can create budget under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own budget.
     * @deny (create) - User attempts to create budget under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's budget.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} collection.
     * @path /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}
     * @allow (create) - User with matching {userId} can create budgetItem under their budget.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own budgetItem.
     * @deny (create) - User attempts to create budgetItem under another user's budget.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's budgetItem.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgetCategories/{budgetCategoryId} collection.
     * @path /users/{userId}/budgetCategories/{budgetCategoryId}
     * @allow (create) - User with matching {userId} can create budgetCategory under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own budgetCategory.
     * @deny (create) - User attempts to create budgetCategory under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's budgetCategory.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgetCategories/{budgetCategoryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/investments/{investmentId} collection.
     * @path /users/{userId}/investments/{investmentId}
     * @allow (create) - User with matching {userId} can create investment under their profile.
     * @allow (get, list, update, delete) - User with matching {userId} can get, list, update, and delete their own investment.
     * @deny (create) - User attempts to create investment under another user's profile.
     * @deny (get, list, update, delete) - User attempts to get, list, update, or delete another user's investment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/investments/{investmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}